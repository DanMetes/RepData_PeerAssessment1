inspect(rules.sorted)
x <- 2:5
x2 <- x^2
p <- c(.1,.2,.3,.4)
x2*p-(x*p)^2
x2*p
sum(x2*p)-(sum(x*p))^2
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
sum(x*p)
n <- 5
pvals <- seq(0, 1, length = 1000)
plot(c(0, 1), c(0, 1.2), type = "n", frame = FALSE, xlab = "p", ylab = "likelihood")
text((0 : n) /n, 1.1, as.character(0 : n))
sapply(0 : n, function(x) {
phat <- x / n
if (x == 0) lines(pvals, ( (1 - pvals) / (1 - phat) )^(n-x), lwd = 3)
else if (x == n) lines(pvals, (pvals / phat) ^ x, lwd = 3)
else lines(pvals, (pvals / phat ) ^ x * ( (1 - pvals) / (1 - phat) ) ^ (n-x), lwd = 3)
}
)
title(paste("Likelihoods for n = ", n))
plot(pvals, dbinom(7, 8, pvals)/dbinom(7, 8, 7/8), lwd = 3, frame = FALSE, type = "l",
xlab = "p", ylab = "likelihood")
pvals
library(knitr)
folderpath <- getwd()
folderpath
setwd("C:\Users\Dan\Desktop\Coursera\5. Reproducible Research\Proj1")
setwd("C:/Users/Dan/Desktop/Coursera/5. Reproducible Research\Proj1")
setwd("C:/Users/Dan/Desktop/Coursera/5. Reproducible Research/Proj1")
if (!file.exists("activity.zip")) {
stop("Zip file missing")
}
else {
activity_dat <- read.zip("activity.zip")
}
if (!file.exists("activity.zip")) stop("Zip file missing")
else activity_dat <- read.zip("activity.zip")
if (!file.exists("activity.zip")) stop("Zip file missing")
if (!file.exists("activity.zip")) stop("Zip file missing")
else { activity_dat <- read.zip("activity.zip") }
if (!file.exists("activity.zip")) { stop("Zip file missing") }
else { activity_dat <- read.zip("activity.zip") }
if (!file.exists("activity.zip")) then { stop("Zip file missing") }
else { activity_dat <- read.zip("activity.zip") }
if (!file.exists("activity.zip")) then { stop("Zip file missing") }
if (!file.exists("activity.zip")) { stop("Zip file missing") }
activity_dat <- read.zip("activity.zip")
?read.zip
??read.zip
if (!file.exists("activity.zip")) stop("Zip file missing")
else {
activ_dat <- read.table(unz("activity.zip", "activity.dat"), nrows=10,  header=T, quote="\"", sep=",") }
?unz
if (!file.exists("activity.zip")) stop("Zip file missing")
else {
activ_dat <- read.csv(unz("activity.zip", "activity.csv"), nrows=10,  header=T)
}
View(activ_dat)
if (!file.exists("activity.zip")) stop("Zip file missing")
else {
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)
}
View(activ_dat)
if (!file.exists("activit.zip")) stop("Zip file missing")
else {
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)
}
if (!file.exists("activit.zip")) stop("Zip file missing")
if (!file.exists("activity.zip")) stop("Zip file missing")
else if (file.exists("activity.zip")) {
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)
}
!file.exists("activity.zip")
if (!file.exists("activity.zip")) { stop("Zip file missing") }
else {
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)
}
if (!file.exists("activity.zip")) stop("Zip file missing")
else activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)
setwd("C:/Users/Dan/Desktop/Coursera/5. Reproducible Research/Proj1")
if (!file.exists("activity.zip")) stop("Zip file missing")
else activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)
samples <- c(rep(1:10))
for (thissample in samples)
+{
+    if (thissample %% 2 != 0) next
+    else print(thissample)
+}
samples <- c(rep(1:10))
for (thissample in samples) {
if (thissample %% 2 != 0) next
else print(thissample)}
if (!file.exists("activity.zip")) stop("Zip file missing")
else {activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)}
if (!file.exists("activity.zip")) stop("Zip file missing")
else if (file.exists("activity.zip")) {activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)}
if (!file.exists("activity.zip")) then stop("Zip file missing")
if (!file.exists("activity.zip")) stop("Zip file missing")
else {activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)}
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T)
View(activ_dat)
View(activ_dat)
360*24/5
2355/5
60*24
60*24/5
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1],)]
!is.na(activ_dat[,1],)
activ_dat[,1]
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),]
?aggregate
View(activ_dat_no_na)
steps_day <- aggregate(steps ~ date, data=activ_dat_no_na, sum)
hist(steps_day)
str(activ_dat_no_na)
sum(activ_dat_no_na[,1])
aggregate(steps ~ date, data=activ_dat_no_na, sum)
steps_day
hist(steps_day)
str(steps_day)
hist(steps_day$steps) # create hisogram
steps_day <- aggregate(steps ~ date, data=activ_dat_no_na, sum) # aggregate steps by day
hist(steps_day$steps, breaks=10, main ="Histogram of Daily Number of Steps ") # create histogram
hist(steps_day$steps, breaks=10, main ="Histogram of Daily Number of Steps ",
xlab="Number of Steps") # create histogram
hist(steps_day$steps, breaks=10, main ="Histogram of Daily Number of Steps ",
xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
hist(steps_day$steps, breaks=10, main ="Daily Number of Steps (Histogram)",
xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
hist(steps_day$steps, breaks=10, main ="Daily Number of Steps (Histogram) - Individual X, Oct to
Nov", xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
hist(steps_day$steps, breaks=10, main ="Daily Number of Steps (Histogram)", xlab="Number of
Steps", ylab="Frequency of Daily Number of Steps") # create histogram
summary(steps_day$steps)
steps_day_smr <- summary(steps_day$steps)
steps_day_smr$Median
steps_day_smr$Me
steps_day_smr[1]
steps_day_smr[3]
str(steps_day_smr)
mean(steps_day_smr)
median(steps_day_smr)
median(steps_day$steps)
mean(steps_day$steps)
steps_day_med <- median(steps_day$steps)
steps_day_mean <- mean(steps_day$steps)
steps_day_med <- round(median(steps_day$steps),1)
steps_day_mean <- round(mean(steps_day$steps),1)
steps_day_mean
steps_day_med <- round(median(steps_day$steps),0)
steps_day_mean <- round(mean(steps_day$steps),0)
steps_day_med
steps_day_mean
`r steps_day_mean`, while the meadian number of steps was `r steps_day_med`.
`r steps_day_mean` while the meadian number of steps was `r steps_day_med`.
steps_interval <- aggregate(steps ~ interval, data=activ_dat_no_na, mean) # aggregate steps by interval
View(steps_interval)
steps_interval
plot(steps_interval$steps,steps_interval$interval,type="l")
plot(steps_interval$interval,steps_interval$steps,type="l")
steps_interval <- aggregate(steps ~ interval, data=activ_dat_no_na, mean) # aggregate steps by interval
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps per 5-min
Interval", xlab = "5min Interval", ylab = "Average Number of Steps")
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps \n per 5-min
Interval", xlab = "5min Interval", ylab = "Average Number of Steps")
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps \n per 5-min
Interval", xlab = "5min Interval", ylab = "Average Number of Steps")
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps \n per 5-min Interval"
, xlab = "5min Interval", ylab = "Average Number of Steps")
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps \n per 5-min Interval"
, xlab = "5-min Interval", ylab = "Average Number of Steps")
?time
View(steps_interval)
steps_interval_max <- max(steps_interval$steps)
steps_interval_max
steps_interval_max <- steps_interval$Interval[which(max(steps_interval$steps))]
steps_interval$Interval
steps_interval$interval[which(max(steps_interval$steps))]
steps_interval$interval
which(max(steps_interval$steps))
max(steps_interval$steps)
?which
steps_interval[steps_interval$steps==max(steps_interval$steps),1]
steps_interval_max <- steps_interval[steps_interval$steps==max(steps_interval$steps),1]
steps_interval_max
View(steps_interval)
is.na(activ_dat[,1])
activ_dat[steps_na_index,1]
steps_na_index <- is.na(activ_dat[,1])
activ_dat[steps_na_index,1]
activ_dat[steps_na_index,2]
na_count <- sum(is.na(activ_dat[,1]))
na_count
steps_interval$interval
View(steps_interval)
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
na_count <- sum(is.na(activ_dat[,1]))
na_index <- is.na(activ_dat[,1])
for (i in 1:na_count) {
activ_dat[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat[na_index[i],3]),2]
}
View(activ_dat)
View(activ_dat)
View(steps_interval)
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
View(activ_dat)
View(activ_dat)
na_count <- sum(is.na(activ_dat[,1]))
is.na(activ_dat[,1])
activ_dat[na_index,]
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
na_count <- sum(is.na(activ_dat[,1]))
na_index <- is.na(activ_dat[,1])
for (i in 1:na_count) {
activ_dat[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat[na_index[i],3]),2]
na_index[i]
}
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
na_count <- sum(is.na(activ_dat[,1]))
na_index <- is.na(activ_dat[,1])
for (i in 1:na_count) {
activ_dat[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat[na_index[i],3]),2]
paste(i,","na_index[i])
}
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
na_count <- sum(is.na(activ_dat[,1]))
na_index <- is.na(activ_dat[,1])
for (i in 1:na_count) {
activ_dat[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat[na_index[i],3]),2]
paste(i,",",na_index[i])
}
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
na_count <- sum(is.na(activ_dat[,1]))
na_index <- is.na(activ_dat[,1])
for (i in 1:na_count) {
activ_dat[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat[na_index[i],3]),2]
print(paste(i,",",na_index[i]))
}
na_index <- which(is.na(activ_dat[,1]))
na_index
which(!is.na(activ_dat[,1]))
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
na_count <- sum(is.na(activ_dat[,1]))
na_index <- which(!is.na(activ_dat[,1]))
na_index
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
na_count <- sum(is.na(activ_dat[,1]))
na_index <- which(is.na(activ_dat[,1])==TRUE)
na_index
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data
na_count <- sum(is.na(activ_dat[,1]))  ## count obs. with missing steps
na_index <- which(is.na(activ_dat[,1])==TRUE) ## retain index of obs with missing steps
for (i in 1:na_count) {
activ_dat[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat[na_index[i],3]),2]
print(paste(i,",",na_index[i]))
}
View(activ_dat)
setwd("C:/Users/Dan/Desktop/Coursera/5. Reproducible Research/Proj1") # set working directory
if (!file.exists("activity.zip")) stop("Zip file missing") # check if file exists
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # read in data
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
steps_day <- aggregate(steps ~ date, data=activ_dat_no_na, sum) # aggregate steps by day
hist(steps_day$steps, breaks=10, main ="Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
steps_day_med <- round(median(steps_day$steps),0) # median rounded to integer value
steps_day_mean <- round(mean(steps_day$steps),0) # mean rounded to integer value
steps_interval <- aggregate(steps ~ interval, data=activ_dat_no_na, mean) # aggregate steps by interval
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps per 5-min Interval", xlab = "5-min Interval", ylab = "Average Number of Steps")
steps_interval_max <- steps_interval[steps_interval$steps==max(steps_interval$steps),1]
activ_dat2 <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data in new file
na_count <- sum(is.na(activ_dat2[,1]))  ## count obs. with missing steps
na_index <- which(is.na(activ_dat2[,1])==TRUE) ## retain index of obs with missing steps
for (i in 1:na_count) {
activ_dat2[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat2[na_index[i],3]),2]
## assign obs with missing steps the corresponding mean interval values over the timeframe
}
steps_day2 <- aggregate(steps ~ date, data=activ_dat2, sum) # aggregate steps by day
hist(steps_day2$steps, breaks=10, main ="Modified Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Modified Daily Number of Steps") # create histogram
steps_day_med2 <- round(median(steps_day2$steps),0) # median rounded to integer value
steps_day_mean2 <- round(mean(steps_day2$steps),0) # mean rounded to integer value
steps_day2 <- aggregate(steps ~ date, data=activ_dat2, sum) # aggregate steps by day
hist(steps_day2$steps, breaks=10, main ="Modified Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Modified Daily \n Number of Steps") # create histogram
steps_day_med2 <- round(median(steps_day2$steps),0) # median rounded to integer value
steps_day_mean2 <- round(mean(steps_day2$steps),0) # mean rounded to integer value
?weekdays
weekdays(activ_dat$date)
activ_dat$date
?date
date(activ_dat$date, %Y-%m-%d)
date("2012-11-04", %Y - %m - %d)
date("2012-11-04", %Y %m %d)
as.date("2012-11-04", %Y %m %d)
as.date("2012-11-04")
as.Date("2012-11-04")
as.Date("2012-11-04", %Y %m %d)
as.Date("2012-11-04", format="%Y %m %d")
as.Date("2012-11-04", format="%Y %b %d")
as.Date("2012-11-04")
format(as.Date("2012-11-04"), format="%Y %b %d"))
format(as.Date("2012-11-04"), format="%Y %b %d")
weekdays(as.Date(activ_dat$date))
activ_dat[,4] <- weekdays(as.Date(activ_dat$date))
names(activ_dat)[4] <- "DayName""
View(activ_dat)
View(activ_dat)
}
}
mk
-
;
quit
""
names(activ_dat)[4] <- "DayName"
View(activ_dat)
activ_dat[,4] <- weekdays(as.Date(activ_dat$date)) # create column of day names based on date column
names(activ_dat)[4] <- "DayName"
weekdat <- activ_dat[activ_dat$DayName in c("Monday","Tuesday","Wednesday","Thursday","Friday"),]
weekenddat <- activ_dat[activ_dat$DayName in c("Saturday","Sunday"),]
weekdat <- activ_dat[activ_dat$DayName %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),]
weekenddat <- activ_dat[activ_dat$DayName %in% c("Saturday","Sunday"),]
View(weekdat)
activ_dat[,4] <- weekdays(as.Date(activ_dat$date)) # create column of day names based on date column
names(activ_dat)[4] <- "DayName"
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
weekdat <- activ_dat_no_na[activ_dat_no_na$DayName %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),]
weekenddat <- activ_dat_no_na[activ_dat_no_na$DayName %in% c("Saturday","Sunday"),] # split data by weekday, weekend
activ_dat[,4] <- weekdays(as.Date(activ_dat$date)) # create column of day names based on date column
names(activ_dat)[4] <- "DayName"
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
activ_dat_no_na[activ_dat_no_na$DayName %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),5] <- "weekday"
activ_dat_no_na[activ_dat_no_na$DayName %in% c("Saturday","Sunday"),5] <- "weekend" # split data by weekday, weekend
names(activ_dat_no_na)[5] <- "TypeOfDay"
View(activ_dat_no_na)
totals <- aggregate(steps ~ interval + TypeOfDay, data=activ_dat_no_na, FUN = mean)
totals
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + geom_area()
library(ggplot2) ## initiate library
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + geom_area()
print(gplot)
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + facet_grid(. ~ TypeOfDay) +geom_line(size=1)
print(gplot)
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + facet_grid(. ~ TypeOfDay) +geom_line(color="blue")
print(gplot)
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + facet_grid(. ~ TypeOfDay) +geom_line(color="blue",size=1)
gplot <- gplot + labs(title = "Average Number of Steps Taken Across Days")
gplot <- gplot + xlab("Interval") + ylab("Average Number of Steps")
print(gplot)
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + facet_grid(TypeOfDay ~ .) +geom_line(color="blue",size=1)
gplot <- gplot + labs(title = "Average Number of Steps Taken Across Days")
gplot <- gplot + xlab("Interval") + ylab("Average Number of Steps")
print(gplot)
dev.copy(png,'fig3_panel_days.png', width=800,height=600)
dev.off()
setwd("C:/Users/Dan/Desktop/Coursera/5. Reproducible Research/Proj1") # set working directory
if (!file.exists("activity.zip")) stop("Zip file missing") # check if file exists
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # read in data
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
steps_day <- aggregate(steps ~ date, data=activ_dat_no_na, sum) # aggregate steps by day
hist(steps_day$steps, breaks=10, main ="Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
steps_day_med <- round(median(steps_day$steps),0) # median rounded to integer value
steps_day_mean <- round(mean(steps_day$steps),0) # mean rounded to integer value
## Export plot to png
dev.copy(png,'fig1_hist_days.png', width=800,height=600)
dev.off()
steps_interval <- aggregate(steps ~ interval, data=activ_dat_no_na, mean) # aggregate steps by interval
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps per 5-min Interval", xlab = "5-min Interval", ylab = "Average Number of Steps")
## Export plot to png
dev.copy(png,'fig2_tseries_interval.png', width=800,height=600)
dev.off()
steps_interval_max <- steps_interval[steps_interval$steps==max(steps_interval$steps),1]
activ_dat2 <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data in new file
na_count <- sum(is.na(activ_dat2[,1]))  ## count obs. with missing steps
na_index <- which(is.na(activ_dat2[,1])==TRUE) ## retain index of obs with missing steps
for (i in 1:na_count) {
activ_dat2[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat2[na_index[i],3]),2]
## assign obs with missing steps the corresponding mean interval step values over the timeframe
}
##  Data with filled missing information
steps_day2 <- aggregate(steps ~ date, data=activ_dat2, sum) # aggregate steps by day
hist(steps_day2$steps, breaks=10, main ="Modified - Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
steps_day_med2 <- round(median(steps_day2$steps),0) # median rounded to integer value
steps_day_mean2 <- round(mean(steps_day2$steps),0) # mean rounded to integer value
## Export plot to png
dev.copy(png,'fig3_hist_interval_nomiss.png', width=800,height=600)
dev.off()
activ_dat[,4] <- weekdays(as.Date(activ_dat$date)) # create column of day names based on date column
names(activ_dat)[4] <- "DayName"
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
activ_dat_no_na[activ_dat_no_na$DayName %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),5] <- "weekday"
activ_dat_no_na[activ_dat_no_na$DayName %in% c("Saturday","Sunday"),5] <- "weekend" # split data by weekday, weekend
names(activ_dat_no_na)[5] <- "TypeOfDay" # creata type of day variable and assign it a name
## Aggrgate and plot
totals <- aggregate(steps ~ interval + TypeOfDay, data=activ_dat_no_na, FUN = mean)
library(ggplot2) ## initiate library
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + facet_grid(TypeOfDay ~ .) +geom_line(color="blue",size=1)
gplot <- gplot + labs(title = "Average Number of Steps Taken Across Days")
gplot <- gplot + xlab("Interval") + ylab("Average Number of Steps")
print(gplot)
## Export plot to png
dev.copy(png,'fig4_panel_days.png', width=800,height=600)
dev.off()
setwd("C:/Users/Dan/Desktop/Coursera/5. Reproducible Research/Proj1") # set working directory
if (!file.exists("activity.zip")) stop("Zip file missing") # check if file exists
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # read in data
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
steps_day <- aggregate(steps ~ date, data=activ_dat_no_na, sum) # aggregate steps by day
hist(steps_day$steps, breaks=10, main ="Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
steps_day_med <- round(median(steps_day$steps),0) # median rounded to integer value
steps_day_mean <- round(mean(steps_day$steps),0) # mean rounded to integer value
## Export plot to png
dev.copy(png,'fig1_hist_days.png', width=800,height=600)
dev.off()
steps_interval <- aggregate(steps ~ interval, data=activ_dat_no_na, mean) # aggregate steps by interval
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps per 5-min Interval", xlab = "5-min Interval", ylab = "Average Number of Steps")
steps_interval_max <- steps_interval[steps_interval$steps==max(steps_interval$steps),1]
## Export plot to png
dev.copy(png,'fig2_tseries_interval.png', width=800,height=600)
dev.off()
activ_dat2 <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data in new file
na_count <- sum(is.na(activ_dat2[,1]))  ## count obs. with missing steps
na_index <- which(is.na(activ_dat2[,1])==TRUE) ## retain index of obs with missing steps
for (i in 1:na_count) {
activ_dat2[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat2[na_index[i],3]),2]
## assign obs with missing steps the corresponding mean interval step values over the timeframe
}
##  Data with filled missing information
steps_day2 <- aggregate(steps ~ date, data=activ_dat2, sum) # aggregate steps by day
hist(steps_day2$steps, breaks=10, main ="Modified - Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
steps_day_med2 <- round(median(steps_day2$steps),0) # median rounded to integer value
steps_day_mean2 <- round(mean(steps_day2$steps),0) # mean rounded to integer value
## Export plot to png
dev.copy(png,'fig3_hist_interval_nomiss.png', width=800,height=600)
dev.off()
activ_dat[,4] <- weekdays(as.Date(activ_dat$date)) # create column of day names based on date column
names(activ_dat)[4] <- "DayName"
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
activ_dat_no_na[activ_dat_no_na$DayName %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),5] <- "weekday"
activ_dat_no_na[activ_dat_no_na$DayName %in% c("Saturday","Sunday"),5] <- "weekend" # split data by weekday, weekend
names(activ_dat_no_na)[5] <- "TypeOfDay" # creata type of day variable and assign it a name
## Aggrgate and plot
totals <- aggregate(steps ~ interval + TypeOfDay, data=activ_dat_no_na, FUN = mean)
library(ggplot2) ## initiate library
## initiate ggplot object and add in features
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + facet_grid(TypeOfDay ~ .) +geom_line(color="blue",size=1)
gplot <- gplot + labs(title = "Average Number of Steps Taken Across Days")
gplot <- gplot + xlab("Interval") + ylab("Average Number of Steps")
print(gplot)
dev.copy(png,'fig4_panel_days.png', width=800,height=600)
dev.off()
setwd("C:/Users/Dan/Desktop/Coursera/5. Reproducible Research/Proj1") # set working directory
if (!file.exists("activity.zip")) stop("Zip file missing") # check if file exists
activ_dat <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # read in data
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
steps_day <- aggregate(steps ~ date, data=activ_dat_no_na, sum) # aggregate steps by day
hist(steps_day$steps, breaks=10, main ="Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
steps_day_med <- round(median(steps_day$steps),0) # median rounded to integer value
steps_day_mean <- round(mean(steps_day$steps),0) # mean rounded to integer value
## Export plot to png
dev.copy(png,'fig1_hist_days.png', width=800,height=600)
dev.off()
steps_interval <- aggregate(steps ~ interval, data=activ_dat_no_na, mean) # aggregate steps by interval
plot(steps_interval$interval,steps_interval$steps,type="l", main = "Average Number of Steps per 5-min Interval", xlab = "5-min Interval", ylab = "Average Number of Steps")
steps_interval_max <- steps_interval[steps_interval$steps==max(steps_interval$steps),1]
## Export plot to png
dev.copy(png,'fig2_tseries_interval.png', width=800,height=600)
dev.off()
activ_dat2 <- read.csv(unz("activity.zip", "activity.csv"),  header=T) # re-read in data in new file
na_count <- sum(is.na(activ_dat2[,1]))  ## count obs. with missing steps
na_index <- which(is.na(activ_dat2[,1])==TRUE) ## retain index of obs with missing steps
for (i in 1:na_count) {
activ_dat2[na_index[i],1] <- steps_interval[(steps_interval$interval==activ_dat2[na_index[i],3]),2]
## assign obs with missing steps the corresponding mean interval step values over the timeframe
}
##  Data with filled missing information
steps_day2 <- aggregate(steps ~ date, data=activ_dat2, sum) # aggregate steps by day
hist(steps_day2$steps, breaks=10, main ="Modified - Daily Number of Steps (Histogram)", xlab="Number of Steps", ylab="Frequency of Daily Number of Steps") # create histogram
steps_day_med2 <- round(median(steps_day2$steps),0) # median rounded to integer value
steps_day_mean2 <- round(mean(steps_day2$steps),0) # mean rounded to integer value
## Export plot to png
dev.copy(png,'fig3_hist_interval_nomiss.png', width=800,height=600)
dev.off()
# Note: Original data is used; na's (steps) are removed
activ_dat[,4] <- weekdays(as.Date(activ_dat$date)) # create column of day names based on date column
names(activ_dat)[4] <- "DayName"
activ_dat_no_na <- activ_dat[!is.na(activ_dat[,1]),] # removing obs. with missing no.of steps
activ_dat_no_na[activ_dat_no_na$DayName %in% c("Monday","Tuesday","Wednesday","Thursday","Friday"),5] <- "weekday"
activ_dat_no_na[activ_dat_no_na$DayName %in% c("Saturday","Sunday"),5] <- "weekend" # split data by weekday, weekend
names(activ_dat_no_na)[5] <- "TypeOfDay" # creata type of day variable and assign it a name
## Aggrgate and plot
totals <- aggregate(steps ~ interval + TypeOfDay, data=activ_dat_no_na, FUN = mean)
library(ggplot2) ## initiate library
## initiate ggplot object and add in features
gplot <- ggplot(totals, aes(interval, steps, group=TypeOfDay))
gplot <- gplot + facet_grid(TypeOfDay ~ .) +geom_line(color="blue",size=1)
gplot <- gplot + labs(title = "Average Number of Steps Taken Across Days")
gplot <- gplot + xlab("Interval") + ylab("Average Number of Steps")
print(gplot)
## Export plot to png
dev.copy(png,'fig4_panel_days.png', width=800,height=600)
dev.off()
